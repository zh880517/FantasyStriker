using System;
using System.Collections.Generic;
using System.Text;

namespace ECSGenerator
{
    public class FileGenerator
    {
        interface ILine
        {
            string ToContent();
        }

        class NormalLine : ILine
        {
            public NormalLine(string content)
            {
                Content = content;
            }
            public string Content { get; }

            public string ToContent()
            {
                return Content;
            }
        }
        class BeginScopLine : ILine
        {
            public string ToContent()
            {
                return "{";
            }
        }
        class EndScopLine : ILine
        {
            public EndScopLine(bool semicolons = false)
            {
                WithSemicolons = semicolons;
            }
            public bool WithSemicolons { get; private set; }

            public string ToContent()
            {
                if (WithSemicolons)
                {
                    return "};";
                }
                return "}";
            }
        }

        public struct Scop : IDisposable
        {
            private FileGenerator fileGenerator;
            private readonly bool WithSemicolons;
            public Scop(FileGenerator generator, bool semicolons = false)
            {
                fileGenerator = generator;
                WithSemicolons = semicolons;
                fileGenerator.BeginScop();
            }
            void IDisposable.Dispose()
            {
                fileGenerator.EndScop(WithSemicolons);
                fileGenerator = null;
            }
        }

        public string Name { get; private set; }

        public FileGenerator(string name)
        {
            Name = name;
        }

        private readonly List<ILine> Lins = new List<ILine>();

        public FileGenerator AddFormat(string format, params object[] args)
        {
            Lins.Add(new NormalLine(string.Format(format, args)));
            return this;
        }

        public FileGenerator AddLine(string content = null)
        {
            Lins.Add(new NormalLine(content));
            return this;
        }

        public FileGenerator BeginScop()
        {
            Lins.Add(new BeginScopLine());
            return this;
        }

        public FileGenerator EndScop(bool semicolons = false)
        {
            Lins.Add(new EndScopLine(semicolons));
            return this;
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("//This code was generated by tools, the modify will lost when regenerate.\n");
            int tabCount = 0;
            foreach (var line in Lins)
            {
                if (line is EndScopLine)
                {
                    tabCount--;
                }
                string content = line.ToContent();
                if (content != null && tabCount > 0)
                {
                    sb.Append(' ', tabCount * 4);
                }
                sb.Append(content);
                if (line is BeginScopLine)
                {
                    tabCount++;
                }
                sb.Append('\n');
            }
            return sb.ToString();
        }
    }
}
