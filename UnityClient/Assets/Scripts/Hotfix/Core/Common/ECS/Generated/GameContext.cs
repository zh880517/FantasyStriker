//This code was generated by tools, the modify will lost when regenerate.
public partial class GameEntity : ECSCore.Entity
{
}

public partial class GameContext : ECSCore.Context<GameEntity>
{
    public GameContext(int totalComponents, string[] names, System.Type[] types, string name)
        : base(totalComponents, 0, new ECSCore.ContextInfo(name, names, types),
              (entity) =>
#if (!UNITY_EDITOR)
                new UnsafeAERC(),
#else
                new ECSCore.SafeAERC(entity),
#endif
                 () => new GameEntity())
    {
        InitializeEntityIndices();
    }

    public GameContext(int totalComponents, string[] names, System.Type[] types)
       : this(totalComponents, names, types, "Game")
    {
    }

    public GameContext()
       : this(GameComponentsLookup.TotalComponents, GameComponentsLookup.componentNames, GameComponentsLookup.componentTypes, "Game")
    {
    }

    protected virtual void InitializeEntityIndices()
    {
    }

}
public sealed partial class GameMatcher
{
    public static ECSCore.IAllOfMatcher<GameEntity> AllOf(params int[] indices)
    {
        return ECSCore.Matcher<GameEntity>.AllOf(indices);
    }
    public static ECSCore.IAllOfMatcher<GameEntity> AllOf(params ECSCore.IMatcher<GameEntity>[] matchers)
    {
        return ECSCore.Matcher<GameEntity>.AllOf(matchers);
    }
    public static ECSCore.IAnyOfMatcher<GameEntity> AnyOf(params int[] indices)
    {
        return ECSCore.Matcher<GameEntity>.AnyOf(indices);
    }
    public static ECSCore.IAnyOfMatcher<GameEntity> AnyOf(params ECSCore.IMatcher<GameEntity>[] matchers)
    {
        return ECSCore.Matcher<GameEntity>.AnyOf(matchers);
    }
}
